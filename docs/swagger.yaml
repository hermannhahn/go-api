basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Product:
    properties:
      active:
        type: boolean
      category:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Response:
    properties:
      data:
        $ref: '#/definitions/models.Product'
      message:
        type: string
    type: object
  models.ResponseList:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: hermann.h.hahn@gmail.com
    name: API Support
    url: https://github.com/hermannhahn/go-api
  description: This is a simple rest api with golang
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Simple Rest API
  version: "1.1"
paths:
  /products:
    get:
      description: returns message and a list of products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList'
      summary: List all products
      tags:
      - /products
    post:
      consumes:
      - application/json
      description: creates a new product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create a new product
      tags:
      - /products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: deletes a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete a product
      tags:
      - /products
    get:
      consumes:
      - application/json
      description: returns message and a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get product by ID
      tags:
      - /products
    patch:
      consumes:
      - application/json
      description: updates a product
      parameters:
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update a product
      tags:
      - /products
  /products/s/{query}:
    get:
      consumes:
      - application/json
      description: returns message and a list of products
      parameters:
      - description: Search term
        in: path
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseList'
      summary: Search products by name, description, category or price
      tags:
      - /products
swagger: "2.0"
